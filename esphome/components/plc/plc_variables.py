import os
import re

from esphome.core import CORE
from .enums import IOMode, LocationPrefix, SizePrefix, ADDRESS_PREFIXES_TO_IO_MODE_MAP


# There is a dependency of this ESPHome component code variables naming and MetIEC way of naming C
# code variables. To simplify this, a IEC 61131-3 nomenclature has been introduced that is
# described at OpenPLC website:
# https://autonomylogic.com/docs/2-3-input-output-and-memory-addressing/.
#
# According to that description:
# - bit (X) PLC addresses have a two-part hierarchical address,
# - bit (X) least significant part (right-most) can be interpreted as a position in a byte and must
#   be in the range 0 to 7,
# - bit (X) most significant part (left-most) must be no more than 1023,
# - bit (X) parts are separated by a single period,
# - data sizes other than X have a one-part hierarchical address.
#
# In order to PLC component work correctly, it is required to keep the same nomenclature in both PLC
# IEC61131-3 code and in ESPHome configuration YAML file. Also, a change in MatIEC that will impact
# variable name generation can break this ESPHome PLC component as handling implementations are
# separately maintained.
#
# One way of resolving this ESPHOme <-> MatIEC naming dependency would be to use in ESPHome
# configuration YAML, the names that are generated by MatIEC, but format used there may be hard to
# understand and is not related to nomenclature used in IEC61131-3 standard, so this does not looks
# like fully fledged solution, but more like a hack...


MATIEC_BIT_LOCATION_PATTERN = re.compile(
    r"__LOCATED_VAR\((\w+),(\w+),(I|Q|M),(X),(\d+),(\d+)\)\n"
)

MATIEC_LOCATION_PATTERN = re.compile(
    r"__LOCATED_VAR\((\w+),(\w+),(I|Q|M),(B|W|D|L),(\d+)\)\n"
)


def get_located_variables(plc_generated_code_location: str) -> list[tuple[IOMode, str]]:
    base_path = CORE.relative_config_path(plc_generated_code_location) + os.path.sep
    variables = []

    with open(base_path + "LOCATED_VARIABLES.h", encoding="utf-8") as located_vars_file:
        for located_vars_line in located_vars_file.readlines():
            for pattern in [MATIEC_BIT_LOCATION_PATTERN, MATIEC_LOCATION_PATTERN]:
                if match := pattern.fullmatch(located_vars_line):
                    var_name = match[2]
                    location_prefix = LocationPrefix(match[3])
                    size_prefix = SizePrefix(match[4])
                    io_mode = ADDRESS_PREFIXES_TO_IO_MODE_MAP[
                        (location_prefix, size_prefix)
                    ]
                    variables.append((io_mode, var_name))
                    break

    return variables
